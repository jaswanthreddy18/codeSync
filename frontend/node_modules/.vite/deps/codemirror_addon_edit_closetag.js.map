{
  "version": 3,
  "sources": ["../../codemirror/addon/fold/xml-fold.js", "../../codemirror/addon/edit/closetag.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter)\n      if (!openTag || iter.line != start.line) return\n      var end = toTagEnd(iter)\n      if (!end) return\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && cmp(endPos.from, startPos) > 0 ? {from: startPos, to: endPos.from} : null\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n", "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing !== false)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening !== false)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state)\n      var tagName = tagInfo && tagInfo.name\n      if (!tagName) return CodeMirror.Pass\n\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && tagInfo.close ||\n          tok.string.indexOf(\"/\") == (pos.ch - tok.start - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true))\n        return CodeMirror.Pass;\n\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = { text: \"/>\", newPos: CodeMirror.Pos(pos.line, pos.ch + 2) };\n        continue;\n      }\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnAutoClose);\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnSlash);\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement, mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\"\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state)\n        var top = context.length ? context[context.length - 1] : \"\"\n        if (!context || (context.length && closingTagExists(cm, context, top, pos)))\n          return CodeMirror.Pass;\n        replacement = head + top\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    if (!dontIndentOnAutoClose) {\n        for (var i = 0; i < ranges.length; i++)\n            if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n                cm.indentLine(ranges[i].head.line);\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    var onCx = newTag ? 1 : 0\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx\n      else break\n    }\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "CodeMirror", "cm"]
}
